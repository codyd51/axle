[EXTERN _task_context_offset]
[EXTERN _task_is_currently_executing_offset]
[EXTERN _task_cpu_id_offset]
[EXTERN task_die]

[GLOBAL context_switch]
[GLOBAL _task_bootstrap]
[GLOBAL _first_context_switch]

_first_context_switch:
    ; rdi: Pointer to the task to switch to
    ; rsi: Pointer to the CPU's current task field
    ; rdx: Current CPU ID
    jmp _context_switch_restore_state


context_switch:
    ; rdi: Pointer to the task to switch to
    ; rsi: Pointer to the CPU's current task field
    ; rdx: Current CPU ID

;Save the old task's state
    ; Save registers that are supposed to be callee-saved
    push rax
    push rbx
    push rsi
    push rdi
    push rbp

    ; Save preempted task's esp as cpu_current_task->machine_state
    mov rax, [rsi]
    add rax, [_task_context_offset]
    mov [rax], rsp
    ; Note that the preempted task is no longer executing
    mov rax, [rsi]
    add rax, [_task_is_currently_executing_offset]
    mov [rax], byte 0

;Load the new task's state
_context_switch_restore_state:
    ; Set the provided task as the CPU's current task
    mov [rsi], rdi

    ; Note that the new task is currently executing
    mov rax, rdi
    add rax, [_task_is_currently_executing_offset]
    mov [rax], byte 1

    ; Save the CPU ID where the task is executing
    mov rax, rdi
    add rax, [_task_cpu_id_offset]
    mov [rax], qword rdx

    ; Load rsp with _current_task->machine_state
    mov rax, rdi
    add rax, [_task_context_offset]
    mov rsp, [rax]

    ; Restore registers that were callee-saved
    pop rbp
    pop rdi
    pop rsi
    pop rbx
    pop rax

    ; Return to the new task's EIP (that was stored on its stack)
    sti
    ret


_task_bootstrap:
    ; rsp+8: entry point pointer
    ; rsp+16: entry point arg1
    ; rsp+24: entry point arg2
    ; rsp+32: entry point arg3
    ; Entry point arg1
    mov rdi, [rsp+16]
    ; Entry point arg2
    mov rsi, [rsp+24]
    ; Entry point arg3
    mov rdx, [rsp+32]
    ; Entry point
    call [rsp+8]

    mov rdx, rax
    call task_die
    ; Should never execute...
    ; Try to force a page fault
    mov rax, 0x0
    call rax
    ret
