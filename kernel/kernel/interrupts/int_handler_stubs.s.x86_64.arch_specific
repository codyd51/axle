[extern interrupt_handle]
[global interrupt_trampoline]

; Internal interrupt vector that doesn't push an error code
%macro InternalInterrupt 1
    [global internal_interrupt%1]
    internal_interrupt%1:
        ; Internal interrupt
        push 0
        ; Dummy error code to maintain a consistent stack frame with InternalInterruptWithErrorCode
        push 0
        ; Interrupt number
        push %1
        ; State save, handle interrupt, state restoration
        jmp interrupt_trampoline
%endmacro

; Internal interrupt vector that pushes an error code
%macro InternalInterruptWithErrorCode 1
    [GLOBAL internal_interrupt%1]
    internal_interrupt%1:
        ; Internal interrupt
        push 0
        ; Error code is implicitly pushed by CPU
        ;
        ; Interrupt number
        push %1
        ; State save, handle interrupt, state restoration
        jmp interrupt_trampoline
%endmacro

; this macro creates a stub for an IRQ - the first parameter is
; the IRQ number, the second is the ISR number it's remapped to
%macro RemappedExternalInterrupt 2
    [GLOBAL external_interrupt%1]
    external_interrupt%1:
        ; External interrupt
        push 1
        ; Dummy error code to maintain a consistent stack frame with InternalInterruptWithErrorCode
        push 0
        ; Interrupt number
        push %2
        ; State save, handle interrupt, state restoration
        jmp interrupt_trampoline
%endmacro

; These interrupt vectors are defined by the CPU spec to push error codes
InternalInterruptWithErrorCode 8
InternalInterruptWithErrorCode 10
InternalInterruptWithErrorCode 11
InternalInterruptWithErrorCode 12
InternalInterruptWithErrorCode 13
InternalInterruptWithErrorCode 14
InternalInterruptWithErrorCode 17
InternalInterruptWithErrorCode 21

; Internal interrupt vectors that don't push an error code
InternalInterrupt 0
InternalInterrupt 1
InternalInterrupt 2
InternalInterrupt 3
InternalInterrupt 4
InternalInterrupt 5
InternalInterrupt 6
InternalInterrupt 7
InternalInterrupt 9
InternalInterrupt 15
InternalInterrupt 16
InternalInterrupt 18
InternalInterrupt 19
InternalInterrupt 20
InternalInterrupt 22
InternalInterrupt 23
InternalInterrupt 24
InternalInterrupt 25
InternalInterrupt 26
InternalInterrupt 27
InternalInterrupt 28
InternalInterrupt 29
InternalInterrupt 30
InternalInterrupt 31

; Syscall vector
InternalInterrupt 128

RemappedExternalInterrupt 0,  32
RemappedExternalInterrupt 1,  33
RemappedExternalInterrupt 2,  34
RemappedExternalInterrupt 3,  35
RemappedExternalInterrupt 4,  36
RemappedExternalInterrupt 5,  37
RemappedExternalInterrupt 6,  38
RemappedExternalInterrupt 7,  39
RemappedExternalInterrupt 8,  40
RemappedExternalInterrupt 9,  41
RemappedExternalInterrupt 10, 42
RemappedExternalInterrupt 11, 43
RemappedExternalInterrupt 12, 44
RemappedExternalInterrupt 13, 45
RemappedExternalInterrupt 14, 46
RemappedExternalInterrupt 15, 47

RemappedExternalInterrupt 16, 64
RemappedExternalInterrupt 17, 65
RemappedExternalInterrupt 18, 66
RemappedExternalInterrupt 19, 67
RemappedExternalInterrupt 20, 68
RemappedExternalInterrupt 21, 69
RemappedExternalInterrupt 22, 70
RemappedExternalInterrupt 23, 71
RemappedExternalInterrupt 24, 72
RemappedExternalInterrupt 25, 73
RemappedExternalInterrupt 26, 74
RemappedExternalInterrupt 27, 75
RemappedExternalInterrupt 28, 76
RemappedExternalInterrupt 29, 77
RemappedExternalInterrupt 30, 78
RemappedExternalInterrupt 31, 79
RemappedExternalInterrupt 32, 80
RemappedExternalInterrupt 33, 81
RemappedExternalInterrupt 34, 82
RemappedExternalInterrupt 35, 83
RemappedExternalInterrupt 36, 84
RemappedExternalInterrupt 37, 85
RemappedExternalInterrupt 38, 86
RemappedExternalInterrupt 39, 87
RemappedExternalInterrupt 40, 88
RemappedExternalInterrupt 41, 89
RemappedExternalInterrupt 42, 90
RemappedExternalInterrupt 43, 91
RemappedExternalInterrupt 44, 92
RemappedExternalInterrupt 45, 93
RemappedExternalInterrupt 46, 94
RemappedExternalInterrupt 47, 95
RemappedExternalInterrupt 48, 96

; Common interrupt trampoline. 
; (1) Saves running program state
; (2) Set up kernel mode segment selectors
; (3) Call interrupt_handle
; (4) Restore running program state
; (5) Return from interrupt
interrupt_trampoline:
    ; (1) Save running program state
    push r15
    push r14
    push r13
    push r12
    push r11
    push r10
    push r9
    push r8
    push rdi
    push rsi 
    push rbp 
    ; No need to save rsp as the processor's done it automatically
    push rbx 
    push rdx
    push rcx
    push rax

    ; Retain current data segment
    mov ax, ds
    push rax

    ; (2) Set up kernel mode segment selectors
    ; (Segment selector constant defined in <kernel/gdt/gdt_structures.h>)
    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; (3) Call interrupt_handle
    ; Provide the registers state as a parameter that the interrupt can modify
    mov rdi, rsp
    ; Clear DF as SysV requires it to be clear on function entry
    ; It'll be restored for the caller when the iretq restores RFLAGS
    cld
    call interrupt_handle

    ; (4) Restore running program state
    pop rax
    mov gs, ax
    mov fs, ax
    mov es, ax
    mov ds, ax

    pop rax
    pop rcx
    pop rdx
    pop rbx
    pop rbp
    pop rsi
    pop rdi
    pop r8
    pop r9
    pop r10
    pop r11
    pop r12
    pop r13
    pop r14
    pop r15
    ; Clean up external interrupt flag, error code, and interrupt number
    add rsp, 24

    ; (5) Return from interrupt
    iretq

[global user_mode]
user_mode:
    cli
    ; Set segment selectors to the user-mode data selector
    ; User-mode data segment is the 4th GDT selector (4 * 8 bytes = 0x20),
    ; The first 2 bits represent the RPL, so set those to ring3
    mov ax, 0x23
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; The stack pointer to load is passed as the first parameter
    mov rax, rdi
    ; The pointer to jump to is passed as the second parameter
    mov rdx, rsi

    ; iretq will pop CS, RIP, RFLAGS, RSP, and SS
    ; Push onto the stack in this order
    ; Load the provided stack
    mov rsp, rax
    ; SS:RSP
    push 0x23
    push rax
    ; RFLAGS
    pushf
    ; Re-enable interrupts in the pushed RFLAGS
    pop rax
    or rax, 0x200
    push rax
    ; CS:RIP
    ; User-mode CS selector is 3rd GDT selector (4 * 8 bytes = 0x18),
    ; The first 2 bits represent the RPL, so set those to ring3
    push 0x1b
    push rdx
    iretq
