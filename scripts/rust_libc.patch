diff --git a/Cargo.toml b/Cargo.toml
index 893fa64f7..7d6a7db6b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -22,7 +22,8 @@ features = ["const-extern-fn", "extra_traits"]
 rustc-std-workspace-core = { version = "1.0.0", optional = true }
 
 [features]
-default = ["std"]
+# Don't link to std by default
+default = []
 std = []
 align = []
 rustc-dep-of-std = ['align', 'rustc-std-workspace-core']
diff --git a/src/axle/mod.rs b/src/axle/mod.rs
new file mode 100644
index 000000000..3426fe0e6
--- /dev/null
+++ b/src/axle/mod.rs
@@ -0,0 +1,95 @@
+// libc port for axle
+//
+
+pub type c_schar = i8;
+pub type c_uchar = u8;
+pub type c_short = i16;
+pub type c_ushort = u16;
+pub type c_int = i32;
+pub type c_uint = u32;
+pub type c_float = f32;
+pub type c_double = f64;
+pub type c_longlong = i64;
+pub type c_ulonglong = u64;
+pub type intmax_t = i64;
+pub type uintmax_t = u64;
+
+pub type size_t = usize;
+pub type ptrdiff_t = isize;
+pub type intptr_t = isize;
+pub type uintptr_t = usize;
+pub type ssize_t = isize;
+
+pub type c_long = i64;
+pub type c_ulong = u64;
+
+pub type wint_t = u32;
+pub type wctype_t = i64;
+
+pub type regoff_t = size_t;
+pub type off_t = c_long;
+
+cfg_if! {
+    if #[cfg(target_arch = "x86_64")] {
+        mod x86_64;
+        pub use self::x86_64::*;
+    } else {
+        // Unknown target_arch
+    }
+}
+
+cfg_if! {
+    if #[cfg(libc_core_cvoid)] {
+        pub use ::ffi::c_void;
+    } else {
+        // Use repr(u8) as LLVM expects `void*` to be the same as `i8*` to help
+        // enable more optimization opportunities around it recognizing things
+        // like malloc/free.
+        #[repr(u8)]
+        #[allow(missing_copy_implementations)]
+        #[allow(missing_debug_implementations)]
+        pub enum c_void {
+            // Two dummy variants so the #[repr] attribute can be used.
+            #[doc(hidden)]
+            __variant1,
+            #[doc(hidden)]
+            __variant2,
+        }
+    }
+}
+
+ const AMC_MAX_SERVICE_NAME_LEN: usize = 64;
+ #[repr(C)]
+ #[derive(Debug)]
+ #[allow(missing_copy_implementations)]
+ pub struct AmcMessage {
+     pub source: [u8; AMC_MAX_SERVICE_NAME_LEN],
+     pub dest: [u8; AMC_MAX_SERVICE_NAME_LEN],
+     pub len: u32,
+     pub body: [u8; 0]
+ }
+
+extern "C" {
+    pub fn malloc(size: usize) -> *mut ::c_void;
+    pub fn free(ptr: *mut ::c_char) -> ();
+
+    pub fn printf(fmt: *const u8, ...) -> i32;
+    pub fn assert(condition: bool, message: *const u8) -> ();
+
+    pub fn amc_register_service(service_name: *const u8) -> ();
+    pub fn amc_message_send(destination_service: *const u8, buf: *const ::c_void, buf_size: u32) -> bool;
+    pub fn amc_message_await_any(out_message: *mut *mut ::AmcMessage) -> ();
+    pub fn amc_message_await(from_service: *const u8, out_message: *mut *mut ::AmcMessage) -> ();
+    pub fn amc_message_await__u32_event(from_service: *const u8, expected_event: u32, out_message: *mut *mut ::AmcMessage) -> ();
+    pub fn amc_has_message() -> bool;
+    pub fn amc_has_message_from(from_service: *const u8) -> bool;
+    pub fn usleep(ms: u64) -> ();
+    pub fn adi_register_driver(driver_name: *const u8, irq: u32) -> ();
+    pub fn adi_event_await(irq: u32) -> bool;
+    pub fn adi_send_eoi(irq: u32) -> ();
+}
+
+#[link(name = "c")]
+#[link(name = "m")]
+//#[link(name = "utils")]
+extern {}
diff --git a/src/axle/x86_64.rs b/src/axle/x86_64.rs
new file mode 100644
index 000000000..76ec3ce82
--- /dev/null
+++ b/src/axle/x86_64.rs
@@ -0,0 +1,2 @@
+pub type c_char = i8;
+pub type wchar_t = i32;
diff --git a/src/lib.rs b/src/lib.rs
index 630ee7a0e..6862c7ddb 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -129,6 +129,12 @@ cfg_if! {
 
         mod solid;
         pub use solid::*;
+    } else if #[cfg(target_os = "axle")] {
+        mod fixed_width_ints;
+        pub use fixed_width_ints::*;
+
+        mod axle;
+        pub use axle::*;
     } else if #[cfg(unix)] {
         mod fixed_width_ints;
         pub use fixed_width_ints::*;
